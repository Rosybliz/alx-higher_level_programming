``say_my_name()`` prints user's name

	>>> say_my_name = __import__('3-say_my_name').say_my_name

	>>> say_my_name("Onyinyechi", "Onwuakpa")
	My name is Onyinyechi Onwuakpa

It works when both arguments are strings, or one of them is given
::
	>>> say_my_name("Rosy")
	My name is Rosy 

	>>> say_my_name("9", "Rosy")
	My name is 9 Rosy

	>>> say_my_name("Akwolu Innocent", "Chinweike")
	My name is Akwolu Innocent Chinweike

it fails when an argument that isn't a string is passed
::
    	>>> say_my_name(1, "Chinweike")
	Traceback (most recent call last):
		...
	TypeError: first_name must be a string

	>>> say_my_name("Chinweike", 75)
	Traceback (most recent call last):
        	...
	TypeError: last_name must be a string

It fails when you pass None or you dont pass any argument
::
    	>>> say_my_name(None)
    	Traceback (most recent call last):
        	...
    	TypeError: first_name must be a string

    	>>> say_my_name()
    	Traceback (most recent call last):
        	...
    	TypeError: say_my_name() missing 1 required positional argument: 'first_name'


It fails when you pass a bool
::
    	>>> say_my_name(True)
    	Traceback (most recent call last):
        	...
    	TypeError: first_name must be a string

It fails when you pass a list,set,tuple or dictionary
::
   	>>> say_my_name({},{})
    	Traceback (most recent call last):
        	...
    	TypeError: first_name must be a string

	>>> say_my_name([], "Rosy")
    	Traceback (most recent call last):
        	...
    	TypeError: first_name must be a string

    	>>> say_my_name("Eddie", ())
    	Traceback (most recent call last):
        	...
    	TypeError: last_name must be a string
